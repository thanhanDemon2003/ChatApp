@model MessageVM
@using System.Security.Claims



<div class="container">
    <div class="row clearfix">
        <div class="col-lg-12">
            <div class="">
                <div class="chat">
                    <div class="chat-header clearfix">
                        <div class="row">
                            <div class="col-lg-6">
                                <a href=""
                                   data-toggle="modal"
                                   data-target="#view_info">
                                    <img src="https://bootdey.com/img/Content/avatar/avatar2.png"
                                         alt="avatar" />
                                </a>
                                <div class="chat-about">
                                    <h6 class="m-b-0">@Model.conversationName</h6>
                                    <small>Last seen: 2 hours ago</small>
                                </div>
                            </div>
                            </div> 
                        </div>
                    </div>
                <div class="chat-history" id="chatContainer" style="height: 400px; overflow-y: auto;">
                    <ul class="m-b-0" id="containerMess">
                        
                        @foreach (var message in Model.messages)
                            {

                                @if (message.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier))
                                {
                                <li class="clearfix messageGr">
                                    <div class="user-chat float-right">
                                        @if (DateOnly.FromDateTime(message.SentDate) == DateOnly.FromDateTime(DateTime.Now))
                                        {
                                            <span class="user-chat">Tôi - @message.SentDate.ToString("hh:mm"), Today</span>
                                        }else if (DateOnly.FromDateTime(message.SentDate) < DateOnly.FromDateTime(DateTime.Now)){
                                            <span class="user-chat">Tôi - @message.SentDate.ToString("hh:mm dd/MM/yyyy")</span>
                                        }else{
                                        continue;
                                        }
                                    </div>
                                    <div class="message user-message">
                                        @message.Content
                                    </div>
                                </li>
                                }else
                                {
                                <li class="clearfix messageGr">
                                    <div class="user-chat">
                                        @if (DateOnly.FromDateTime(message.SentDate) == DateOnly.FromDateTime(DateTime.Now))
                                        {
                                            <span class="user-chat">@message.User.Name - @message.SentDate.ToString("hh:mm"), Today</span>
                                        }
                                        else if (DateOnly.FromDateTime(message.SentDate) < DateOnly.FromDateTime(DateTime.Now))
                                        {
                                            <span class="user-chat">@message.User.Name - @message.SentDate.ToString("hh:mm dd/MM/yyyy")</span>
                                        }else{
                                            continue;
                                        }
                                    </div>
                                    <div class="message other-message">
                                        @message.Content
                                    </div>
                                </li>
                                }

                            }
                        </ul>

                    </div>
                    <div class="chat-message clearfix input-sendGr">
                        <div class="input-group mb-0">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="bi bi-plus-circle-fill"></i>
                                </span>
                            </div>
                            <input id="ipMess" type="text"
                                   class="form-control"
                                   placeholder="Enter text here..." />
                            <button id="btnSendMess" type="button">
                                <i class="bi bi-send"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="~/js/signalr.min.js"></script>
    <script>
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/chathub")
            .withAutomaticReconnect([0, 1000, 5000, null])
            .build();
        connection.on("ReceiveMessageToUser", function (user, message, receiver, time) {
            addMessageToUI(message, receiver, time);
        });
        connection.on("ReceiveMessageGroup", function (message, receiver, time) {
            addMessageToUI(message, receiver, time);
        });
        connection.start().then(function () {
            console.log("Connected");
        }).catch(function (err) {
            return console.error(err.toString());
        });
        AbortController.on
    </script>
    <script>
        $(document).ready(function () {
            scrollToBottom();
        });

        function scrollToBottom() {
            var chatContainer = $('#chatContainer');
            chatContainer.scrollTop(chatContainer.prop('scrollHeight'));
        }

        function onNewMessage() {
            scrollToBottom();
        }
        const currentDate = new Date();
        const hours = String(currentDate.getHours()).padStart(2, '0');
        const minutes = String(currentDate.getMinutes()).padStart(2, '0');
        function addMessageToUI(message, receiver, time) {
                var messageGr = document.createElement("li");
                messageGr.className = "clearfix messageGr";
            messageGr.setAttribute("b-wkeqg5priu", "");
                var otherChat = document.createElement("div");
                otherChat.className = "user-chat";
            otherChat.setAttribute("b-wkeqg5priu", "");

            otherChat.innerHTML = receiver + " - " + time
                var messageContent = document.createElement("div");
            messageContent.className = "message other-message";
            messageContent.setAttribute("b-wkeqg5priu", "");
                messageContent.innerHTML = message;
                messageGr.appendChild(otherChat);
                messageGr.appendChild(messageContent);
                document.getElementById("containerMess").appendChild(messageGr);
            onNewMessage();

            
        }
        function addMessageToUIUser(message) {
            var messageGr = document.createElement("li");
            messageGr.className = "clearfix messageGr";
            messageGr.setAttribute("b-wkeqg5priu", "");
            var userChat = document.createElement("div");
            userChat.className = "user-chat float-right";
            userChat.setAttribute("b-wkeqg5priu", "");
            userChat.innerHTML = `Tôi - ${ hours }:${ minutes } `;
            var messageContent = document.createElement("div");
            messageContent.className = "message user-message";
            messageContent.setAttribute("b-wkeqg5priu", "");
            messageContent.innerHTML = message;
            messageGr.appendChild(userChat);
            messageGr.appendChild(messageContent);
            document.getElementById("containerMess").appendChild(messageGr);
            onNewMessage();

        }

        const btnSendMess = document.getElementById("btnSendMess");
        btnSendMess.addEventListener("click", function () {
            var inputMess = document.getElementById("ipMess").value
            if (inputMess === "") {
                return;
            }
            var isGr = "@Model.isGroup";
            addMessageToUIUser(inputMess);
            if (isGr === 'False') {
                const data = {
                    senderId: "@User.FindFirstValue(ClaimTypes.NameIdentifier)",
                    receiverId: "@Model.sendToId",
                    content: inputMess
                }
                sendMessToUser(data);
                console.log(data, isGr);

            } else if (isGr === 'True') {
                const data = {
                    senderId: "@User.FindFirstValue(ClaimTypes.NameIdentifier)",
                    groupId: "@Model.sendToId",
                    content: inputMess
                }
                sendMessToGroup(data)
                console.log(data, isGr);

            }else{
                return;
            }
            ipMess.value = "";
        });
        function sendMessToUser(data) {
            $.ajax({
                type: "POST",
                url: "/api/ApiChats/SendMessageToUser",
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (response) {
                    console.log(response);
                },
                error: function (response) {
                    console.log(response);
                }
            })
        }
        function sendMessToGroup(data) {
            $.ajax({
                type: "POST",
                url: "/api/ApiChats/SendMessageToGroup",
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (response) {
                    console.log(response);
                },
                error: function (response) {
                    console.log(response);
                }
            })
        }

    </script>

}                          
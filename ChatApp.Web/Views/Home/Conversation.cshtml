@using System.Security.Claims
@model ConversationVM

<div class="container">
    <div class="row clearfix">
        <div class="col-lg-12">
            <div class="card chat-app">
                <div id="plist" class="people-list">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">
                                <i class="bi bi-search"></i>
                            </span>
                        </div>
                        <input type="text"
                               class="form-control"
                               placeholder="Search..." />
                    </div>
                    <div class="col-12 mt-2" data-bs-toggle="modal" data-bs-target="#exampleModal">
                        <span
                           class="btn btn-primary">
                            <i class="bi bi-plus
                                 "></i> Tạo Group Chat
                        </span>
                    </div>

                    <ul class="list-unstyled chat-list mt-2 mb-0">
                        <!-- Chat user -->
                        @foreach (var user in Model.userList)
                        {
                            if(user.Id == User.FindFirstValue(ClaimTypes.NameIdentifier))
                            {
                                 <li class="clearfix d-none" id="@user.Id">
                                     <img src="@user.ImageUrl"
                                         alt="avatar" />
                                    <div class="about">
                                        <div id="nameUser" class="name">@user.FullName</div>
                                        <div class="status">
                                            <i class="bi bi-circle-fill"></i> Offline
                                        </div>
                                    </div>
                                 </li>
                            }
                            else
                            {
                                <li class="clearfix userChat" data-bs-toggle="modal" data-bs-target="#ModalMessUser" id="@user.Id">
                                    <img src="@user.ImageUrl"
                                         alt="avatar" />
                                    <div class="about">
                                        <div id="fullNameUser">@user.FullName</div>
                                        <div class="status">
                                            <i class="bi bi-circle-fill" style=""></i> Offline
                                        </div>
                                    </div>
                                </li>
                            }
                        }

                        <!-- end chat -->
                    </ul>
                </div>
                <div class="chat">
                    <div class="chat-header clearfix h-100">
                        <h1 class="text-center fs-3">Cuộc trò chuyện của bạn</h1>
                        <div class="row" id="containerConversation">
                            @foreach (Conversation conversation in Model.conversationList)
                            {
                                <div class="conversation-item">
                                     <a class="bg-white" asp-asp-controller="Home" asp-action="Chat" asp-route-conversationId="@conversation.ConversationId">
                                        <img src="@conversation.imageUrlConversation"
                                             alt="avatar" />
                                    <div class="chat-about">
                                        <h6 class="m-b-0">
                                            @if (conversation.GroupName != null)
                                            {
                                                <span> @conversation.GroupName</span>
                                            }
                                            else
                                            {
                                                <span>@conversation.ReceiverName</span>
                                            }

                                        </h6>
                                        <small>
                                            @conversation.LatestMessage - @conversation.LatestMessageDateTime.ToString("HH:mm dd-MM-yyyy")
                                        </small>
                                    </div>
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="ModalMessUser" tabindex="-1" aria-labelledby="ModalLabelMessUser" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                <h5 class="modal-title" id="ModalLabelMessUser">Gửi lời chào đầu tiên</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="recipient-name" class="col-form-label">Người nhận:</label>
                            <input type="text" class="form-control" id="">
                        </div>
                        <div class="mb-3">
                            <label for="message-text" class="col-form-label">Tin nhắn:</label>
                            <textarea class="form-control" id="messFirst"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button id="sendMessUserFirst" type="button" class="btn btn-primary">Gửi</button>
                </div>
            </div>
       </div>
</div>
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Tạo Group Chat Mới</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                    <div class="mb-3">
                        <label class="col-form-label">Tên Group Chat:</label>
                        <input type="text" class="form-control" id="recipient-name">
                    </div>
                    <div class="mb-3">
                        <label for="member-search" class="col-form-label">Thành viên:</label>
                        <input type="text" id="member-search" class="form-control" placeholder="Tìm kiếm thành viên...">
                        <div id="member-list">
                           @foreach (var user in Model.userList)
                           {
                            if (user.Id != User.FindFirstValue(ClaimTypes.NameIdentifier))
                            {
                                   <span class="member-item" id="@user.Id">
                                       <img src="@user.ImageUrl" alt="Member Image">
                                       @user.FullName
                                   </span>
                               }
                           }
                        </div>
                    </div>
            <div class="modal-footer">
                <button id="btn-createGroup" type="button" class="btn btn-primary">Tạo Nhóm</button>
            </div>
        </div>
    </div>
</div>
</div>


@section Scripts {
        <script src="~/js/signalr.min.js"></script>
        <script>
            var userId = '@User.FindFirstValue(ClaimTypes.NameIdentifier)';

            var connection = new signalR.HubConnectionBuilder()
                .withUrl("/hubs/chathub")
                .withAutomaticReconnect([0, 1000, 5000, null])
                .build();

            connection.on("ReceiveUserConnected", function (userId, name) {
                console.log(`${name, userId} has openned a connection`);
                var userItem = document.getElementById(userId);
                if (userItem) {
                    const status = userItem.querySelector('.status');
                    const i = status.querySelector('i');
                    status.removeChild(i);
                    status.innerHTML = '<i class="bi bi-circle-fill" style="color:chartreuse;"></i> Online';
                }
            });
        connection.on("ReceiveAddConversation", function (conversationId, nameConversation, notification) {
            addConversation(conversationId, nameConversation, notification);
                console.log(message);
            })
            connection.on("ReceiveUserDisconnected", function (userId, name) {
                console.log(`${name, userId} has closed a connection`);
                var userItem = document.getElementById(userId);
                if (userItem) {
                    const status = userItem.querySelector('.status');
                    const i = status.querySelector('i');
                    status.removeChild(i);
                    status.innerHTML = '<i class="bi bi-circle-fill" </i> Offline';
                }
            });
            connection.onclose(function (e) {
                connection.send("OnDisconnectedAsync", userId);
                console.log('Connection closed');
            });
            connection.start().then(function () {
                console.log("Connected");
                connection.invoke("OnConnectedAsync", userId);
            }).catch(function (err) {
                return console.error(err.toString());
            });
        </script>
<script>
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('show.bs.modal', event => {
                const modalId = modal.getAttribute('id');

                if (modalId === 'exampleModal') {
                    exampleModal.addEventListener('show.bs.modal', event => {
                        const button = event.relatedTarget;
                        const recipient = button.getAttribute('data-bs-whatever');
                        const modalBodyInput = exampleModal.querySelector('.modal-body input');
                        modalBodyInput.value = recipient;
                    });
                } else if (modalId === 'ModalMessUser') {
                    const modalMessUser = document.getElementById('ModalMessUser');
                    const modalUserInput = modalMessUser.querySelector('input');

                   
                        const users = document.querySelectorAll('.userChat');
                        users.forEach(user => {
                            user.addEventListener('click', () => {
                                const dataUser = {
                                    id: user.id,
                                    name: user.querySelector('#fullNameUser').textContent
                                };
                                const modalLabel = modalMessUser.querySelector('.modal-title');
                                modalLabel.textContent = `Gửi lời chào đầu tiên`;
                                modalUserInput.value = dataUser.name;
                                modalUserInput.id = dataUser.id;
                                modalUserInput.setAttribute('readonly', 'readonly');
                                modalMessUser.querySelector('textarea').value = '';
                            });
                        modalMessUser.addEventListener('shown.bs.modal', event => {
                        });
                    });
                }
            });
        });
         const memberItems = document.querySelectorAll('.member-item');

            memberItems.forEach(item => {
                item.addEventListener('click', () => {
                    if (item.classList.contains('active')) {
                        item.classList.remove('active');
                    } else {
                        item.classList.add('active');
                    }
                });
            });

            const memberSearch = document.getElementById('member-search');
            const memberList = document.getElementById('member-list');

            memberSearch.addEventListener('input', () => {
                const searchTerm = memberSearch.value.toLowerCase();
                memberItems.forEach(item => {
                    const name = item.textContent.trim().toLowerCase();
                    const isActive = item.classList.contains('active');

                    if (name.includes(searchTerm) || isActive) {
                        item.style.display = 'inline-flex';
                    } else {
                        item.style.display = 'none';
                    }
                });
            });

            const conversations = document.querySelectorAll('.conversation-item');
            conversations.forEach(conversation => {
                conversation.addEventListener('click', () => {
                    const conversationId = conversation.id;
                    // window.location.href = `/Home/Chat?conversationId=${conversationId}`;
                });
            });

            function addConversation(id, name, notification) {
                const time = new Date(); // Tạo một đối tượng Date mới
                const vnTime = new Date(time.toLocaleString("en-US", { timeZone: "Asia/Ho_Chi_Minh" }));
                const timeString = vnTime.getHours() + ':' + vnTime.getMinutes() + ' ' + vnTime.getDate() + '-' + (vnTime.getMonth() + 1) + '-' + vnTime.getFullYear();
                const container = document.getElementById('containerConversation');
                const newConversationHTML = `<div b-5iuhrdxvg4 class="conversation-item">
                                                             <a b-5iuhrdxvg4 class="bg-white" asp-controller="Home" href="/Home/Chat?conversationId=${id}">
                                                                 <img b-5iuhrdxvg4 src="/images/iconGroup.jpg" alt="avatar">
                                                                 <div b-5iuhrdxvg4 class="chat-about">
                                                                     <h6 b-5iuhrdxvg4 class="m-b-0">
                                                                         <span b-5iuhrdxvg4 >${name}</span>
                                                         </h6>
                                                                                 <small b-5iuhrdxvg4 >
                                                             ${notification} - ${timeString}
                                                         </small>
                                                     </div>
                                                 </a>
                                             </div>`;
                container.insertAdjacentHTML('afterbegin', newConversationHTML);
            }


            const btnCreateGroup = document.getElementById('btn-createGroup');
            btnCreateGroup.addEventListener('click', () => {
                const groupName = document.getElementById('recipient-name').value;
                const memberItems = document.querySelectorAll('.member-item');
                const memberIds = [];
                memberItems.forEach(item => {
                    if (item.classList.contains('active')) {
                        memberIds.push(item.id);
                    }
                });
                $.ajax({
                    url: '/api/ApiChats/CreateGroupChat',
                    type: 'POST',
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        roomName: groupName,
                        userCreate: '@User.FindFirstValue(ClaimTypes.NameIdentifier)',
                        userIds: memberIds
                    }),
                    success: function (data) {
                        alert('Tạo nhóm thành công');
                        setTimeout(() => {
                            window.location.reload();
                        }, 3000);
                    },
                    error: function (error) {
                        console.log(error);
                        alert('Tạo nhóm thất bại', error.responseText);
                    }
                });

            });

    document.getElementById('sendMessUserFirst').addEventListener('click', ()=> {
            const containerModal = document.getElementById('ModalMessUser')
                const user = containerModal.querySelector('input');
                const message = containerModal.querySelector('textarea');
                console.log(user.id);
                console.log(user.value);
                console.log(message.value);
                const data = {
                    senderId: '@User.FindFirstValue(ClaimTypes.NameIdentifier)',
                    receiverId: user.id,
                    content: message.value
                };
                $.ajax({
                    type: "POST",
                    url: "/api/ApiChats/SendMessageToUser",
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function (response) {
                        console.log(response);
                        alert('Gửi tin nhắn thành công');
                        // setTimeout(() => {
                        //     window.location.reload();
                        // }, 3000);
                    },
                    error: function (response) {
                        console.log(response);
                    }
                })

    });
</script>


}